%% Part 1
% Load set of predefined point
P1 = readmatrix('Mire/Mire/Mire1.points', 'FileType', 'text');
P2 = readmatrix('Mire/Mire/Mire2.points', 'FileType', 'text');


% Load a pair of stereo images and resize them
mire1 = imread('Mire/Mire/Mire1.pgm');
mire2 = imread('Mire/Mire/Mire2.pgm');
mire1 = imresize(mire1, 0.8);
mire2 = imresize(mire2, 0.8);

% Homogeneous coordinates
P1_hom = [P1, ones(size(P1, 1), 1)];
P2_hom = [P2, ones(size(P2, 1), 1)];

% Without normalization
disp("F without normalization")
F1 = EightPointsAlgorithm(P1_hom, P2_hom);
disp(F1);
visualizeEpipolarLines(mire1, mire2, F1, P1, P2);

disp("F with normalization")
% With normalization
F2 = EightPointsAlgorithmN(P1_hom, P2_hom);


% Check the epipolar constraint ((x'^_T)Fx=0) holds for all points 
% with the estimated F (both with and without normalization)
threshold = 10^-2;

resultEvaluation(mire1, mire2, P1, P2, P1_hom, P2_hom, F1, threshold, "Mire without normalization");
resultEvaluation(mire1, mire2, P1, P2, P1_hom, P2_hom, F1, threshold, "Mire with normalization");

%% Part 2 - Acquire and match your own images 10^-2;

% Run the image matching algorithm between the two images, 
% obtaining a set of M correspondences 
% (presumably, some of them will be wrong/noisy)

list_sift = findMatches(mire1, mire2, 'SIFT', 0.75);
% dividing into two set
pt1 = list_sift(:, 1:2);
pt2 = list_sift(:, 3:4);

% Homogeneous coordinates
pt1_hom = [list_sift(:, 1:2), ones(height(list_sift),1)];
pt2_hom = [list_sift(:, 3:4), ones(height(list_sift),1)];

% Call the RANSAC function to estimate the optimal F matrix 
% from the correspondences 

[bestF, consensus, outliers] = ransacF(pt1_hom', pt2_hom', threshold);

% Visualize the results and evaluate your estimated F 
% (see Evaluation of the results below)
resultEvaluation(mire1, mire2, pt1, pt2, pt1_hom, pt2_hom, bestF, threshold, "Mire with ransac");